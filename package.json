{
  "name": "uroborosql-fmt",
  "description": "SQL formatter with 2way-sql support",
  "author": "Future Corporation",
  "license": "BUSL-1.1",
  "version": "1.1.1",
  "repository": {
    "type": "git",
    "url": "https://github.com/future-architect/vscode-uroborosql-fmt.git"
  },
  "publisher": "Future",
  "icon": "uroborosql-fmt-icon.png",
  "categories": [
    "Formatters"
  ],
  "keywords": [
    "uroborosql-fmt",
    "sql",
    "2way-sql",
    "formatter"
  ],
  "engines": {
    "vscode": "^1.63.0"
  },
  "activationEvents": [
    "*"
  ],
  "main": "./client/out/extension",
  "contributes": {
    "commands": [
      {
        "command": "uroborosql-fmt.uroborosql-format",
        "title": "Format SQL"
      },
      {
        "command": "uroborosql-fmt.import-to-global",
        "title": "Import uroborosql-fmt config file config to global config"
      },
      {
        "command": "uroborosql-fmt.import-to-workspace",
        "title": "Import uroborosql-fmt config file config to workspace config"
      },
      {
        "command": "uroborosql-fmt.export",
        "title": "Export workspace config to uroborosql-fmt config file"
      }
    ],
    "configuration": {
      "title": "uroborosql-fmt",
      "properties": {
        "uroborosql-fmt.configurationFilePath": {
          "type": "string",
          "markdownDescription": "The path of configuration file. File extension must be `.json`.\n\n- If you don't specify the path and `./.uroborosqlfmtrc.json` exists, formatter will use `./.uroborosqlfmtrc.json`.\n- If you doesn't specify and `.uroborosqlfmtrc.json` doesn't exist, formatter will use formatters default configurations.\n\nYou can use the commands listed below.\n- By executing `Import uroborosql-fmt config file config to workspace config` command, you can import formatter configurations into the workspace configuration.\n- By executing `Import uroborosql-fmt config file config to global config` command, you can import formatter configurations into the global configuration.\n- By executing `Export workspace config to uroborosql-fmt config file` command, you can export VSCode configurations to the formatter configuration file.",
          "pattern": "^$|.+\\.json$",
          "patternErrorMessage": "File extension must be `.json`."
        },
        "uroborosql-fmt.debug": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "description": "Run in debug mode. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.tabSize": {
          "type": [
            "integer",
            "null"
          ],
          "minimum": 0,
          "default": null,
          "description": "Tab size used for formatting. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.complementAlias": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Complement aliases. Currently, column names are auto-completed with the same name. (e.g. `COL1` → `COL1 AS COL1`) If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.trimBindParam": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Trim the contents of the [bind parameters](https://future-architect.github.io/uroborosql-doc/background/#%E3%83%8F%E3%82%99%E3%82%A4%E3%83%B3%E3%83%88%E3%82%99%E3%83%8F%E3%82%9A%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF). (e.g. `/* foo */` → `/*foo*/`) If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.keywordCase": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "enum": [
            "upper",
            "lower",
            "preserve"
          ],
          "markdownDescription": "Unify the case of keywords. (No conversion in case of `\"preserve\"`) If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.identifierCase": {
          "type": [
            "string",
            "null"
          ],
          "default": null,
          "enum": [
            "upper",
            "lower",
            "preserve"
          ],
          "markdownDescription": "Unify the case of identifiers. (No conversion in case of `\"preserve\"`) If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.maxCharPerLine": {
          "type": [
            "integer",
            "null"
          ],
          "default": null,
          "markdownDescription": "If the total number of characters in the function name and arguments exceeds `max_char_per_line`, the arguments are formatted with new lines. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.complementOuterKeyword": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Complement the optional OUTER. (e.g. `LEFT JOIN` → `LEFT OUTER JOIN`) If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.complementColumnAsKeyword": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Complement `AS` in column aliases. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.removeTableAsKeyword": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Remove `AS` in table aliases. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.removeRedundantNest": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Remove redundant parentheses. (e.g. (`((foo))`) → `(foo)`) If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.complementSqlId": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "description": "Complement SQL ID. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.convertDoubleColonCast": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Convert casts by `X::type` to the form `CAST(X AS type)`. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        },
        "uroborosql-fmt.unifyNotEqual": {
          "type": [
            "boolean",
            "null"
          ],
          "enum": [
            true,
            false,
            null
          ],
          "default": null,
          "markdownDescription": "Convert comparison operator `<>` to `!=`. If this value is null, uroborosql-fmt refers the configuration file or uses the default value."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -b",
    "watch": "tsc -b -w",
    "lint": "npm run eslint && npm run format:check",
    "lint:fix": "npm run eslint:fix && npm run format",
    "eslint": "eslint ./client ./server",
    "eslint:fix": "npm run eslint -- --fix",
    "format": "prettier --cache --write .",
    "format:check": "prettier --cache --check .",
    "postinstall": "npm run download-uroborosql-fmt-napi && cd client && npm install && cd ../server && npm install && cd ..",
    "test": "sh ./scripts/e2e.sh",
    "download-uroborosql-fmt-napi": "node ./server/download-uroborosql-fmt-napi.mjs",
    "dummy-release": "node ./scripts/dummy-publish.mjs"
  },
  "dependencies": {
    "ts-case-convert": "^2.0.7"
  },
  "devDependencies": {
    "@changesets/changelog-github": "^0.5.0",
    "@changesets/cli": "^2.26.2",
    "@types/mocha": "^10.0.2",
    "@types/node": "^22.0.0",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "eslint": "^8.50.0",
    "mocha": "^10.2.0",
    "prettier": "~3.3.0",
    "typescript": "^5.2.2",
    "undici": "^6.0.0"
  }
}
